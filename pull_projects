#!/usr/bin/perl -w
# $Id$
use strict;
require v5.10.0;
our $VERSION = 'v0.1';

my %OPTS;
my @OPTIONS = qw/help|h|? manual|m test|t get|g dump|d dump-config|dc dump-data|dd/;
if(@ARGV)
{
    require Getopt::Long;
    Getopt::Long::GetOptions(\%OPTS,@OPTIONS);
}
if($OPTS{help}) {
    require Pod::Usage;
    Pod::Usage::pod2usage(-exitval=>0,-verbose => 1);
    exit 0;
}
elsif($OPTS{manual}) {
    require Pod::Usage;
    Pod::Usage::pod2usage(-exitval=>0,-verbose => 2);
    exit 0;
}


my %CONFIG;
$CONFIG{svn} = "https://#1.googlecode.com/svn/#2";
$CONFIG{'git:github'} = "git\@github.com:#1/#2.git";
$CONFIG{'git:gitorious'} = "git\@gitorious.org:#1/#2.git";
$CONFIG{authors} = 'authors';
my %MACRO;

my %project;
my %sub_project;
sub parse_project {
    foreach(@_) {
        chomp;
        #print "[1]",$_,"\n";
        foreach my $v_name (keys %MACRO) {
            s/#$v_name#/$MACRO{$v_name}/g;
        }
        #print "[2]",$_,"\n";
        if(m/^\s*#([^#]+)#\s*=\s*(.+?)\s*$/) {
            my $name = $1;
            my $value = $2;
            next unless($value);
            if($name =~ m/^(?:authors|user|username|email|svn|svn:.+|git|git:.+)$/) {
                $CONFIG{$name} = $value;
                print STDERR "config: $name = $value\n";
            }
            $MACRO{$name} = $value;
            next;
        }
        my @data = (split(/\s*\|\s*/,$_),'','','','','','','');
        foreach(@data) {
            s/^\s+|\s+$//;
        }
        next unless($data[0]);
        my $name = shift @data;
        if($data[0] =~ m/.+\/.+/) {
            $sub_project{$name} = \@data;
        }
        else {
            $project{$name} = \@data;
        }
    }
}

sub translate_url {
    my $url = shift;
    my $path = shift;
    if($path =~ m/^([^\/]+)\/(.+)$/) {
        my $a = $1;
        my $b = $2;
        $url =~ s/#1/$a/g;
        $url =~ s/#2/$b/g;
    }
    else {
        $url =~ s/#1/$path/g;
        $url =~ s/#2//g;
    }
    $url =~ s/\/+$//;
    return $url;
}

sub get_repo {
    my ($name,$target,$user,@repo_data) = @_;
    my %r;
    $r{name} = $name;
    $r{target} = $target ? $target : $name;
    $r{user} = $user ? $user : $CONFIG{user};
    @repo_data = ("svn/$name","git/$name") unless(@repo_data);
    foreach my $url (@repo_data) {
        next unless($url);
        if($url =~ m/^(svn|git):([^\/]+)\/(.*)$/i) {
            my $template = $CONFIG{"$1:$2"} ? $CONFIG{"$1:$2"} : "$2/$3";
            $url = translate_url($template,$3 ? $3 : $name);
            push @{$r{$1}},$url;
        }
        elsif($url =~ m/^(svn|git)\/(.*)$/){
            my $template = $CONFIG{$1} ? $CONFIG{$1} : "$2";
            $url = translate_url($template,$2 ? $2 : $name);
            push @{$r{$1}},$url;
        }
        elsif($url =~ m/^(svn|git):([^\/]+)$/i) {
            push @{$r{$1}},$2;
        }
        else {
            push @{$r{svn}},$url;
        }
    }
    if($r{user} and $r{user} =~ m/(.+)\s+<([^\@]+\@[^\@]+)>\s*$/) {
        $r{username} = $1;
        $r{email} = $2;
    }
    $r{username} = $CONFIG{username} unless($r{username});
    $r{email}   = $CONFIG{email} unless($r{email});
    if($r{svn} and @{$r{svn}}) {
        my @svns = @{$r{svn}};
        $r{svn_main} = shift @svns;
        $r{svn} = \@svns;
    }
    elsif($r{git} and @{$r{git}}) {
        my @gits = @{$r{git}};
        $r{git_main} = shift @gits;
        $r{git} = \@gits;
    }
    return \%r;
}

sub get_repo_old {
    my ($name,$svn_name,$git_name,$target,$user,$username,$email) = @_;
    $svn_name = $name unless($svn_name);
    $git_name = $name unless($git_name);
    $target = $name unless($target);
    $username = $CONFIG{username} unless($username);
    $email = $CONFIG{email} unless($email);
    my %r;
    $r{name} = $name;
    
    foreach (keys %CONFIG) {
        if(m/git|git:.+/) {
            $r{$_} = translate_url($CONFIG{$_},$git_name);
        }
        elsif(m/svn|svn:.+/) {
            $r{$_} = translate_url($CONFIG{$_},$svn_name);
        }
    }
    $r{target} = $target;
    $r{user} = $user ? $user : $CONFIG{user};
    $r{username} = $username;
    $r{email} = $email;
    return \%r;
}


sub clone_repo {
    my $repo = shift;
    my @cmd;
    if($repo->{svn_main}) {
        my $user_file = $CONFIG{authors} . ".txt";
#        if(! -f $user_file) {
#            open FO,">",$user_file;
#            print FO "$repo->{user} = $repo->{username} <$repo->{email}>\n";
#            close FO;
#        }
        @cmd = qw/git svn clone/;
        push @cmd,'-A',$user_file if(-f $user_file);
        push @cmd,'-s',$repo->{svn_main};
    }
    elsif($repo->{git_main}) {
        @cmd = qw/git clone/;
        push @cmd,$repo->{git_main};
    }
    else {
        die("fatal: no main subversion or git repository found!\n");
    }
    unless(run(@cmd,$repo->{target})) {
        die "fatal: while pulling $repo->{name}, ABORT!\n";
    }
    return 1;
}

sub init_svn_repo {
    my ($name,$url) = @_;
    run(qw/git svn -R/,$name,qw/init -s/,$url) 
        or die("fatal: while git svn init [$name] $url\n");
    run(qw/git svn -R/,$name,"fetch")
        or die("fatal: while git svn fetch $name\n");
    return 1;
}
sub init_git_repo {
    my ($name,$url) = @_;
    if(!$name) {
        if($url =~ m/^\//) {
            $name = "local";
        }
        elsif($url =~ m/^git\@([^:\/]+)/) {
            $name = $1;
            $name =~ s/[^\.]+\.([^.]+\.[^\.]+)/$1/;
            $name =~ s/\.(?:com|org|net)$//;
        }
        elsif($url =~ m/([^\/:]+)[\/:]/) {
            $name = $1;
        }
        else {
            $name = $url;
        }
    }
    run(qw/git remote add/,$name,$url); 
#        or die("fatal: while git remote add [$name] $url\n");
    run(qw/git fetch/,$name) 
        or die("fatal: while git fetch $name\n");
    return 1;    
}
sub update_repo {
    my $repo = shift;
    if($repo->{username}) {
        run(qw/git config user.name/,$repo->{username}) or die("fatal: while git config\n");
    }
    if($repo->{email}) {
        run(qw/git config user.email/,$repo->{email}) or die("fatal: while git config\n");
    }
    if($repo->{svn} and @{$repo->{svn}}) {
        foreach my $host (@{$repo->{svn}}) {
            init_svn_repo($1,$host)
            or die("fatal: while init svn repo [$host]\n");
        }
    }
    if($repo->{git} and @{$repo->{git}}) {
        foreach my $host (@{$repo->{git}}) {
            init_git_repo($1,$host)
            or die("fatal: while init git repo [$host]\n");
        }
    }
    run(qw/git branch -av/) or die("fatal: while git branch\n");
}

my $F_TEST = $OPTS{test};

sub run {
    print join(" ",@_),"\n";
    return 1 if($F_TEST);
    return system(@_) == 0;
}


use Cwd qw/getcwd/;

my $PROGRAM_DIR = $0;
$PROGRAM_DIR =~ s/[^\/\\]+$//;


my $cwd = getcwd();
my $PROJECT_FILE;

foreach my $fn (".PROJECTS","$PROGRAM_DIR/.PROJECTS","~/git-svn/.PROJECTS") {
    if(-f $fn) {
        $PROJECT_FILE = $fn;
        last;
    }
}
if($PROJECT_FILE) {
    if(-f $PROJECT_FILE) {
        print STDERR "read: \"$PROJECT_FILE\"\n";
        open FI,"<".$PROJECT_FILE;
        parse_project(<FI>);
        close FI;
    }
}

if(not (@ARGV or $PROJECT_FILE)) {
    print STDERR "input projects data line by line\n";
    print STDERR "separate fields by \"|\".\n";
    print STDERR "name|svn_name|git_name|target_dir|username\n";
    print STDERR "----|--------|--------|----------|--------\n";
    parse_project(<STDIN>);
}
if($OPTS{get}) {
	my $name = shift;
	parse_project(join('|',@ARGV),"\n");
	push @ARGV,$name;
}


my $total = scalar(keys %project) + scalar(keys %sub_project);
print STDERR "read: $total", $total > 1 ? " projects" : " project", "\n";

#my $QUERY_NAME=shift;
#my @query = $QUERY_NAME ? ($QUERY_NAME) : (keys %project,keys %sub_project);
#my $count = $QUERY_NAME ? 1 : $total;
my @query = @ARGV;


if($OPTS{'dump'}) {
    $OPTS{'dump-config'} = 1;
    $OPTS{'dump-data'} = 1;
}

if($OPTS{'dump-config'}) {
    use Data::Dumper;
    print Data::Dumper->Dump([\%CONFIG],["*CONFIG"]);
}

if($OPTS{'dump-data'}) {
    use Data::Dumper;
#    my @query = $QUERY_NAME ? ($QUERY_NAME) : (keys %project,keys %sub_project);
    foreach my $name (@query) {
        my $pdata = $project{$name} ? $project{$name} : $sub_project{$name};
        my $repo = get_repo($name,@{$pdata});
        print Data::Dumper->Dump([$repo],["*$name"]);
    }
}
if($OPTS{'dump-config'} or $OPTS{'dump-data'}) {
    exit 0;
}

my $idx = 0;
my $count = scalar(@query);
print STDERR "pulling $count ", $count > 1 ? "projects" : "project", " ...\n";
foreach my $name (@query) {
    $idx++;
    print "[$idx/$count] pulling project [$name]...\n";
    my $pdata = $project{$name} ? $project{$name} : $sub_project{$name};
	if((!$pdata) or (!ref $pdata)) {
		print "[$idx/$count] project $name not defined.\n";
		next;
	}
    my $repo = get_repo($name,@{$pdata});
    unless($F_TEST or -d $repo->{target}) {
        if(system("mkdir","-p",$repo->{target}) != 0) {
            die("fatal: while create directory " . $repo->{target});
        }
    }
    clone_repo($repo) or die("fatal: while clone repo\n");
    unless($F_TEST) {
        chdir($repo->{target}) or die("$!\n");
    }
    update_repo($repo) or die("fatal: while update repo\n");
    unless($F_TEST) {
        chdir($cwd) or die("$!\n");
    }        
    print "\n";
}

exit 0;

__END__

=pod

=head1  NAME

git-svn-pull-projects - PERL script

=head1  SYNOPSIS

git-svn-pull-projects [options] [project_name] [svn_name] [git_name] [target_dir] [user]
    git-svn-pull-projects -t firefox 
    git-svn-pull-projects -t

=head1  OPTIONS

=over 12

=item B<-t>,B<--test>

Testing mode.

=item B<--dump>

Dump CONFIG and DATA

=item B<--dump-config>

Dump CONFIG

=item B<--dump-data>

Dump DATA

=item B<-h>,B<--help>

Print a brief help message and exits.

=item B<--manual>,B<--man>

View application manual

=back

=head1  FILES

=item B<./.PROJECTS>

Default projects definition file, one line a project, 
echo field separated by |.

=back

=head1 PROJECTS FILE FORMAT

name    |svn_name   |git_name   |target |user

=head1  DESCRIPTION

git-svn projects manager

=head1  CHANGELOG

    2010-11-01  xiaoranzzz  <xiaoranzzz@myplace.hell>
        
        * file created.

=head1  AUTHOR

xiaoranzzz <xiaoranzzz@myplace.hell>

=cut

#       vim:filetype=perl
